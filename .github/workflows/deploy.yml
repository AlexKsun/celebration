name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# GitHub Pages デプロイに必要な権限
permissions:
  contents: read
  pages: write
  id-token: write

# 同時実行制御
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract illustration images from zip
      run: |
        echo "イラスト画像を展開中..."

        # zipファイルが存在する場合は展開
        if [ -f "assets/images/illust.zip" ]; then
          mkdir -p assets/images/illust
          unzip -o assets/images/illust.zip -d assets/images/illust/
          echo "✅ illust.zip を展開しました"
          ls -lh assets/images/illust/*.jpg 2>/dev/null || echo "⚠️ jpgファイルが見つかりません"
        else
          echo "⚠️ illust.zip が見つかりません（スキップ）"
        fi

    - name: Add version cache busting
      run: |
        echo "バージョン番号を追加中..."

        # version.jsからバージョン番号を取得
        VERSION=$(grep "this.currentVersion = " scripts/version.js | sed "s/.*'\(.*\)'.*/\1/")
        echo "検出されたバージョン: $VERSION"

        # HTMLファイル内のリソースURLにバージョン番号を追加
        sed -i "s|href=\"styles/main.css\"|href=\"styles/main.css?v=$VERSION\"|g" index.html
        sed -i "s|src=\"scripts/\([^\"]*\)\.js\"|src=\"scripts/\1.js?v=$VERSION\"|g" index.html

        echo "✅ バージョン $VERSION を追加しました"

    - name: Replace environment variables
      run: |
        echo "環境変数を置換中..."

        # HTMLファイル内の環境変数プレースホルダーを置換
        sed -i "s|{{GAS_URL}}|${{ secrets.GAS_URL }}|g" index.html
        sed -i "s|{{AUTH_PASSWORD}}|${{ secrets.AUTH_PASSWORD }}|g" index.html

        # window.ENV に AUTH_PASSWORD を追加
        sed -i "s|GAS_URL: '{{GAS_URL}}'|GAS_URL: '{{GAS_URL}}', AUTH_PASSWORD: '{{AUTH_PASSWORD}}'|g" index.html
        sed -i "s|GAS_URL: '${{ secrets.GAS_URL }}'|GAS_URL: '${{ secrets.GAS_URL }}', AUTH_PASSWORD: '${{ secrets.AUTH_PASSWORD }}'|g" index.html

        # 置換結果を確認（セキュリティのため一部をマスク）
        echo "GAS_URL置換完了: $(echo '${{ secrets.GAS_URL }}' | sed 's/\(.\{10\}\).*/\1.../')"
        echo "AUTH_PASSWORD置換完了: $(echo '${{ secrets.AUTH_PASSWORD }}' | sed 's/./*/g')"
      env:
        GAS_URL: ${{ secrets.GAS_URL }}
        AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}

    - name: Remove development files for production
      run: |
        echo "本番環境用のクリーンアップ中..."

        # 開発用ファイルを削除
        rm -f .env .env.example

        # 管理者ツールを削除
        sed -i '/<script src="scripts\/admin.js"><\/script>/d' index.html

        # .env ローダーのフォールバック処理を無効化（本番では環境変数のみ使用）
        sed -i 's/await this.loadFromEnvFile();/\/\/ await this.loadFromEnvFile(); \/\/ Disabled in production/g' scripts/env-loader.js

    - name: Validate configuration
      run: |
        echo "設定を検証中..."

        # 必要な環境変数が設定されているかチェック
        if [ -z "${{ secrets.GAS_URL }}" ]; then
          echo "❌ エラー: GAS_URL が設定されていません"
          echo "GitHub Pages の Environment variables で GAS_URL を設定してください"
          exit 1
        fi

        if [ -z "${{ secrets.AUTH_PASSWORD }}" ]; then
          echo "❌ エラー: AUTH_PASSWORD が設定されていません"
          echo "GitHub Pages の Environment variables で AUTH_PASSWORD を設定してください"
          exit 1
        fi

        # GAS URLの形式をチェック
        if [[ ! "${{ secrets.GAS_URL }}" =~ ^https://script\.google\.com/macros/s/.*/exec$ ]]; then
          echo "❌ エラー: GAS_URL の形式が正しくありません"
          echo "正しい形式: https://script.google.com/macros/s/SCRIPT_ID/exec"
          exit 1
        fi

        # パスワードの長さをチェック（最低6文字）
        if [ ${#AUTH_PASSWORD} -lt 6 ]; then
          echo "⚠️ 警告: AUTH_PASSWORD は6文字以上を推奨します"
        fi

        echo "✅ 設定検証完了"
      env:
        AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Deployment summary
      run: |
        echo "🚀 デプロイ完了!"
        echo "サイトURL: ${{ steps.deployment.outputs.page_url }}"
        echo "Environment: github-pages"